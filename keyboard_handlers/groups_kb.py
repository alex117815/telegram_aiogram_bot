from aiogram import Router, types, F
import logging
from StatesGroup.group import *
from create_bot import bot
from keyboards.gropus_kb import *
from db_handler.db_server import PostgresHandlerServer
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER, Command
from aiogram.filters.chat_member_updated import *
from aiogram.types.input_file import FSInputFile
from aiogram.enums import ChatType
import time
import asyncio
import re
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from enums.group_enum import EightBallReply
from check_swear import SwearingCheck
import aiohttp
from functools import lru_cache

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
sch = SwearingCheck()

class ChatTypeFilter(Filter):
    def __init__(self, chat_type: str | list):
        self.chat_type = chat_type

    async def __call__(self, message: types.Message) -> bool:
        if isinstance(self.chat_type, str):
            return message.chat.type == self.chat_type
        else:
            return message.chat.type in self.chat_type

group_router = Router()
group_router.message.filter(
    ChatTypeFilter(chat_type=['supergroup', 'group'])
)

@group_router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def new_user(event: types.ChatMemberUpdated, state: FSMContext) -> None:
    try:
        if not event.chat or not event.new_chat_member:
            logger.error("Error in new_user: event.chat or event.new_chat_member is None")
            return

        pg = PostgresHandlerServer()
        server_id = str(event.chat.id).replace('-', '')
        server = pg.get_server_settings(int(server_id))
        if not server or not server.welcome_users:
            return

        approve_kb = approve_new_user(event.chat.id, event.new_chat_member.user.id)
        user = pg.get_user(int(server_id), event.new_chat_member.user.id)
        if not user:
            pg.add_user(int(server_id), event.new_chat_member.user.id)

        await bot.restrict_chat_member(
            chat_id=event.chat.id,
            user_id=event.new_chat_member.user.id,
            permissions=types.ChatPermissions(can_send_messages=False)
        )
        msg = await event.answer(
            f'üòá –£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nüëã –ü—Ä–∏–≤–µ—Ç, @{event.new_chat_member.user.username}!\n‚è¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç, –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
            reply_markup=approve_kb
        )
        await state.update_data(
            chat_id=event.chat.id,
            new_chat_member_id=event.new_chat_member.user.id,
            message_id=msg.message_id
        )
        await state.set_state(NewUser.step_one)
    except Exception as e:
        logger.exception(f"Error in new_user: {e}")
        raise


@group_router.chat_member(
    ChatMemberUpdatedFilter(
        IS_MEMBER >> IS_NOT_MEMBER
    )
)
async def user_leave(event: ChatMemberUpdated):
    try:

        pg = PostgresHandlerServer()
        server_id = str(event.chat.id).replace('-', '')
        server = pg.get_server_settings(int(server_id))

        if server is None:
            pg.create_table(int(server_id))
            server = pg.get_server_settings(int(server_id))

        if server and server.goodbye_users:
            pg.del_user(int(server_id), event.old_chat_member.user.id)
            await event.answer(f'üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.old_chat_member.user.username} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å, –±–æ–ª—å—à–µ –æ–Ω –Ω–µ —Å –Ω–∞–º–∏.')
    except Exception as e:
        logger.error(f"Error in user_leave: {e}")

@group_router.my_chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated):
    try:

        admins = await event.chat.get_administrators()
        if not admins:
            logger.error("Error in on_user_join: event.chat.get_administrators() returned an empty list")
            admins = []

        admins = [admin.user.username for admin in admins if admin.user is not None]
        logger.info(f'Admins in chat {event.chat.title}: {admins}')

        document = FSInputFile('pictures/group_join.jpg')

        try:
            await event.answer_photo(
                photo=document,
                caption=f"""
üí´ –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>Keaxy</b>, –∏ —è —Å–¥–µ–ª–∞—é –≤–∞—à –∫–∞–Ω–∞–ª —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.

ü´Ö –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
@{', @'.join(map(str, admins))}

<b>üé© –ù–∞–ø–∏—Å–∞–≤ "/" —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!</b>
""", parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error in on_user_join: event.answer_photo failed with error {e}")

        chat_id = str(event.chat.id).replace('-', '')
        if chat_id is None:
            logger.error("Error in on_user_join: chat_id is None")
            return

        pg = PostgresHandlerServer()

        if not pg.check_chat_id(int(chat_id)):
            pg.create_table(int(chat_id))

        try:
            total_users = await event.chat.get_member_count()
        except Exception as e:
            logger.error(f"Error in on_user_join: event.chat.get_member_count failed with error {e}")
            return
        pg.update_total_users(int(chat_id), total_users)
        logger.info(f'Created table for chat {event.chat.title}')

        try:
            await set_default_commands()
        except Exception as e:
            logger.error(f"Error in on_user_join: set_default_commands failed with error {e}")

    except Exception as e:
        logger.error(f"Error in on_user_join: {e}")

async def set_default_commands():
    user_commands = [
        types.BotCommand(command="start", description="–°—Ç–∞—Ä—Ç"),
        types.BotCommand(command="profile", description="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand(command="dice", description="–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫"),
        types.BotCommand(command="ask", description="–°–ø—Ä–æ—Å–∏—Ç—å AI"),
        types.BotCommand(command="8ball", description="–°–ø—Ä–æ—Å–∏—Ç—å —à–∞—Ä–∏–∫"),
        types.BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"),
        types.BotCommand(command="couple", description="–ü–∞—Ä–∞ –¥–Ω—è"),
        types.BotCommand(command="top_karma", description="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"),
    ]

    admin_commands = [
        types.BotCommand(command="users", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"),
        types.BotCommand(command="mute", description="–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        types.BotCommand(command="kick", description="–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        types.BotCommand(command="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    ]

    await bot.set_my_commands(user_commands, scope=types.BotCommandScopeAllGroupChats())

    #admins
    await bot.set_my_commands(admin_commands, scope=types.BotCommandScopeAllChatAdministrators())
    await bot.set_my_commands(user_commands, scope=types.BotCommandScopeAllChatAdministrators())

async def check_user_in_database(message: types.Message):
    try:
        assert message is not None
        assert message.chat is not None
        assert message.from_user is not None

        pg = PostgresHandlerServer()
        chat_id = str(message.chat.id).replace('-', '')
        logger.info(f'chat_id: {chat_id}, message.from_user.id: {message.from_user.id}')

        user = pg.get_user(int(chat_id), message.from_user.id)
        
        if user is None:
            logger.info(f'User {message.from_user.id} not in database')

            admins = await message.chat.get_administrators()
            assert admins is not None
            admins = [admin.user.id for admin in admins]
            logger.info(f'Admins in chat {message.chat.title}: {admins}')

            if message.from_user.id in admins:
                logger.info(f'User {message.from_user.id} added to database by admin')

                pg.add_user(int(chat_id), message.from_user.id, message.from_user.username, admin=True)
            else:
                logger.info(f'User {message.from_user.id} added to database by user')

                pg.add_user(int(chat_id), message.from_user.id, message.from_user.username)
    except AssertionError as e:
        logger.error(f"Error in check_user_in_database: {e}")
    except Exception as e:
        logger.error(f"Unexpected error in check_user_in_database: {e}")

async def check_supergroup(message: types.Message):
    try:
        chat = message.chat
        if chat is None:
            raise ValueError("Chat is None")
        chat_typ = chat.type
        if chat_typ != ChatType.SUPERGROUP:
            logger.info(f'chat_type is not supergroup: {chat_typ}')
            return False
        return True
    except ValueError as e:
        logger.error(f"Error in check_supergroup: {e}")
    except Exception as e:
        logger.error(f"Unexpected error in check_supergroup: {e}")

async def admin_check(message: types.Message) -> bool:
    try:
        assert message is not None
        assert message.chat is not None
        assert message.from_user is not None

        admins = [admin.user.id for admin in await message.chat.get_administrators()]
        if admins is None:
            return False
        pg = PostgresHandlerServer()
        chat_id = str(message.chat.id).replace('-', '')
        if chat_id is None:
            return False
        adm_profile_obj = pg.get_user(int(chat_id), message.from_user.id)
        if adm_profile_obj and adm_profile_obj.admin:
            return True
        if adm_profile_obj is None:
            if message.from_user.id in admins:
                pg.add_user(int(chat_id), message.from_user.id, message.from_user.username, admin=True)
                return True
            else:
                pg.add_user(int(chat_id), message.from_user.id, message.from_user.username, admin=False)
        return False
    except AssertionError as e:
        logger.error(f"Error in admin_check: {e}")
    except Exception as e:
        logger.error(f"Unexpected error in admin_check: {e}")

@group_router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def group_message_dice(message: types.Message):
    try:
        await group_profile(message)
    except Exception as e:
        logger.error(f"Error in group_message_dice: {e}")

@group_router.message(Command('profile'))
async def group_profile(message: types.Message):
    try:
        assert message is not None
        assert message.chat is not None
        assert message.from_user is not None

        await check_user_in_database(message)
        pg = PostgresHandlerServer()
        chat_id = str(message.chat.id).replace('-', '')

        if chat_id is None or message.from_user.id is None:
            raise ValueError("chat_id or user_id is None")

        user = pg.get_user(int(chat_id), message.from_user.id)

        if user is not None:
            user_info = f"""
üë® –ü—Ä–æ—Ñ–∏–ª—å: {message.from_user.id} - @{message.from_user.username}
üÜî –ê–π–¥–∏: {user.user_id}
üë• –ê–¥–º–∏–Ω: {"–î–∞" if user.admin else "–ù–µ—Ç"}
‚è∞ –î–∞—Ç–∞ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏: {user.date_start}
‚ôªÔ∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: {user.respect}
_
‚è±Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.
            """
            await message.answer(user_info)

        else:
            await message.answer('–¢–µ–±—è –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–±—è..')

    except (AssertionError, ValueError) as e:
        logger.error(f"Error in group_profile: {e}")
    except Exception as e:
        logger.error(f"Unexpected error in group_profile: {e}")

@group_router.message(F.text == "–ö—É–±–∏–∫")
async def group_message_dice(message: types.Message):
    try:
        await group_dice(message)
    except Exception as e:
        logger.error(f"Error in group_message_dice: {e}")

@group_router.message(Command('dice'))
async def group_dice(message: types.Message):
    try:
        await check_user_in_database(message)
        await message.answer_dice(emoji='üé≤')
    except Exception as e:
        logger.error(f"Error in group_dice: {e}")

@group_router.message(Command('mute'))
async def group_mute(message: types.Message):
    try:
        confirm = await check_supergroup(message)
        if not confirm:
            return await message.answer("üö∑ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–µ")
        
        await check_user_in_database(message)
        if not await admin_check(message): 
            return await message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

        if not message.reply_to_message:
            return await message.answer("üìõ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å")

        target_user = message.reply_to_message.from_user

        text = message.text
        match = re.match(r'^/mute (\d+)([dhmsy]) ?(.*)?$', text)
        if not match:
            return await message.answer("üö∑ –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–º–µ—Ä: /mute 3h [–ø—Ä–∏—á–∏–Ω–∞]\ns - —Å–µ–∫—É–Ω–¥—ã\nh - —á–∞—Å—ã\nd - –¥–Ω–∏\n–ò —Ç–∞–∫ –¥–∞–ª–µ–µ")

        time_value = int(match.group(1))
        time_unit = match.group(2)
        reason = match.group(3) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        logger.info(f"Time value: {time_value}, time unit: {time_unit}, reason: {reason}")

        time_units = {
            'd': 86400,
            'h': 3600,
            'm': 60,
            's': 1,
            'y': 31536000
        }

        time_in_seconds = time_value * time_units.get(time_unit, 1)

        if time_in_seconds < 30:
            time_in_seconds = 30
        elif time_in_seconds > 31536000:
            time_in_seconds = 31536000

        mute_kb = user_mute_kb(target_user.id)

        logger.info(f"–ú—É—Ç–∏–º —é–∑–µ—Ä–∞ {target_user.id} –Ω–∞ {time_in_seconds} —Å–µ–∫—É–Ω–¥ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        await bot.restrict_chat_member(message.chat.id, target_user.id, until_date=time.time() + time_in_seconds, permissions=types.ChatPermissions(can_send_messages=False))
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{target_user.username}</b> –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –Ω–∞ <b>{time_in_seconds}</b> —Å–µ–∫—É–Ω–¥\n–ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>.\n‚è≥ –†–∞–∑–º—É—Ç –±—É–¥–µ—Ç –≤: <b>{datetime.fromtimestamp(time.time() + time_in_seconds)}</b>", reply_markup=mute_kb, parse_mode='HTML')
        await message.reply_to_message.delete()

    except Exception as e:
        logger.error(f"Error in group_mute: {e}")

@group_router.callback_query(F.data.startswith('unmute_user='))
async def group_unmute_user(cb: types.CallbackQuery):
    try:
        confirm = await check_supergroup(cb.message)
        if not confirm:
            return await cb.message.answer("üö∑ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–µ")
        
        await check_user_in_database(cb.message)
        if not await admin_check(cb.message):
            return await cb.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–∏ÃÜ –∫–æ–º–∞–Ω–¥—ã")

        user_id = int(cb.data.replace('unmute_user=', ''))
        if user_id == cb.from_user.id:
            return await cb.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–µ–±—è –∂–µ!)")

        logger.info(f"–†–∞–∑–º—É—Ç–∏–º —é–∑–µ—Ä–∞ {user_id}")

        await bot.restrict_chat_member(cb.message.chat.id, user_id, permissions=types.ChatPermissions(can_send_messages=True))
        await cb.message.answer(f"üó£Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.")
        await cb.answer("üó£Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω")
        await cb.message.delete()
        await cb.answer()

    except Exception as e:
        logger.error(f"Error in group_unmute_user: {e}")

@group_router.message(Command('users'))
async def group_users(message: types.Message):
    try:
        admin = await admin_check(message)

        if not admin:
            return await message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

        await check_user_in_database(message)
        server_id = str(message.chat.id).replace('-', '')
        users_kb = all_users_kb(int(server_id))
        await message.answer("üë• –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=users_kb)
    except Exception as e:
        logger.error(f"Error in group_play: {e}")

@group_router.callback_query(F.data.startswith('NextPage='))
async def group_next_page(cb: types.CallbackQuery):
    try:
        page_num = int(cb.data.replace('NextPage=', ''))
        keyboard = all_users_kb(page_num)

        await cb.message.edit_reply_markup(reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in group_next_page: {e}")

@group_router.callback_query(F.data.startswith('User_'))
async def group_user_info(cb: types.CallbackQuery):
    try:
        pg = PostgresHandlerServer()
        admin = await admin_check(cb.message)
        if not admin:
            return await cb.message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        user_id = int(cb.data.replace('User_', ''))
        logger.info(user_id)
        pg = PostgresHandlerServer()
        server_id = str(cb.message.chat.id).replace('-', '')
        user_obj = pg.get_user(int(server_id), user_id)

        if not user_obj:
            return await cb.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")
        
        await cb.message.answer(f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{user_obj.username}</b>
‚ÑπÔ∏è ID: <b>{user_obj.user_id}</b>
üòé –ê–¥–º–∏–Ω: <b>{"–î–∞" if user_obj.admin else "–ù–µ—Ç"}</b>
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_obj.date_start}</b>
‚ôªÔ∏è –†–µ—Å–ø–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_obj.respect}</b>
""", parse_mode='HTML')
        await cb.answer()

    except Exception as e:
        logger.error(f"Error in group_user_info: {e}")

@group_router.message(Command('kick'))
async def group_kick(message: types.Message):
    try:
        admin = await admin_check(message)
        if not admin:
            return await message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

        await check_user_in_database(message)
        
        target_user = message.reply_to_message.from_user
        if not target_user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å.")

        await message.chat.ban(user_id=target_user.id)
        await message.chat.unban(user_id=target_user.id)

        await message.answer(f"üê∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_user.username} –±—ã–ª –∫–∏–∫–Ω—É—Ç!\nüö® –ë–æ–ª—å—à–µ –µ–º—É —Ç—É—Ç –Ω–µ —Ä–∞–¥—ã.")
        await message.reply_to_message.delete()
    except Exception as e:
        logger.error(f"Error in group_kick: {e}")

@group_router.message(Command('ban'))
async def group_ban(message: types.Message):
    try:
        admin = await admin_check(message)
        if not admin:
            return await message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

        await check_user_in_database(message)
        
        target_user = message.reply_to_message.from_user
        if not target_user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å.")

        await message.chat.ban(user_id=target_user.id)

        unban_kb = create_unban_kb(target_user.id)
        await message.answer(f"üê∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_user.username} –±—ã–ª <b>–∑–∞–±–∞–Ω–µ–Ω</b>!\nüö® –ë–æ–ª—å—à–µ –µ–º—É —Ç—É—Ç –Ω–µ —Ä–∞–¥—ã.", parse_mode='HTML', reply_markup=unban_kb)
        await message.reply_to_message.delete()
    except Exception as e:
        logger.error(f"Error in group_kick: {e}")

@group_router.callback_query(F.data.startswith('unban_user='))
async def group_unban_user(cb: types.CallbackQuery):
    try:
        user_id = int(cb.data.replace('unban_user=', ''))
        confirm = await admin_check(cb.message)
        if not confirm:
            return await cb.message.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

        await cb.message.chat.unban(user_id=user_id)
        await cb.message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.')
        await cb.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.')

    except Exception as e:
        logger.error(f'Error in group_unban_user: {e}')

@group_router.message(F.text == "+")
async def add_respect(message: types.Message):
    try:
        await check_user_in_database(message)
        server_id = str(message.chat.id).replace('-', '')
        pg = PostgresHandlerServer()

        target_id = message.reply_to_message.from_user
        user = pg.get_user(server_id, target_id.id)

        if user:
            last_respect = datetime.strptime(user.last_respect, '%Y-%m-%d %H:%M:%S')  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            if (datetime.now() - last_respect) > timedelta(minutes=15):  # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–¥–∞—á–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_id.username} (+1)!\nüåà –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {user.respect + 1} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.")
                pg.add_last_respect(server_id, target_id.id)
                pg.add_respect(server_id, target_id.id)
            else:
                await message.answer(f"‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_id.username} –º–µ–Ω–µ–µ —á–µ–º 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥!")
                return

    except Exception as e:
        logger.error(f"Error in add_respect: {e}")

@group_router.message(F.text == "-")
async def del_respect(message: types.Message):
    try:
        await check_user_in_database(message)
        server_id = str(message.chat.id).replace('-', '')
        pg = PostgresHandlerServer()

        target_id = message.reply_to_message.from_user
        user = pg.get_user(server_id, target_id.id)

        if user:
            last_respect = datetime.strptime(user.last_respect, '%Y-%m-%d %H:%M:%S')  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            if (datetime.now() - last_respect) > timedelta(minutes=15):  # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–¥–∞—á–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                await message.answer(f"‚ûñ –í—ã —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_id.username} (-1)!\nüåà –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {user.respect - 1} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.")
                pg.add_last_respect(server_id, target_id.id)
                pg.del_respect(server_id, target_id.id)
            else:
                await message.answer(f"‚ùå –í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_id.username} –º–µ–Ω–µ–µ —á–µ–º 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥!")
                return

    except Exception as e:
        logger.error(f"Error in del_respect: {e}")

@group_router.message(Command('ask'))
async def group_ask(message: types.Message, state: FSMContext):
    try:
        await check_user_in_database(message)

        await message.answer('ü§î –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:')
        await state.set_state(Ask.waiting_for_text)
    except Exception as e:
        logger.error(f"Error in group_ask: {e}")

@group_router.message(Ask.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    try:
        from g4f.client import Client

        client_groq = Client(
            api_key='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'
        )

        text = message.text
        await state.update_data(text=text)

        response = client_groq.chat.completions.create(
            model="",
            provider="Groq",
            messages=[
                {"role": "user", "content": text}
            ]
        )
        start_msg = await message.answer(f'ü§ñ –ë–æ—Ç —É–∂–µ –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.. –ü—Ä–æ—à—É —á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å!\n–ó–∞–ø—Ä–æ—Å: {text}')
        response_text = response.choices[0].message.content
        chunk_size = 25  # —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö

        for i in range(0, len(response_text), chunk_size):
            chunk = response_text[i:i + chunk_size]
            await start_msg.edit_text(f'{start_msg.text}\n–û—Ç–≤–µ—Ç: {chunk}')
            await asyncio.sleep(0.2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏

        await state.clear()

    except Exception as e:
        logger.error(f"Error in process_text: {e}")
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.')

@group_router.message(Command('8ball'))
async def group_8ball(message: types.Message):
    try:
        await check_user_in_database(message)
        text = message.text
        match = re.search(r'^(?:/8ball|8ball) (.+)$', text, re.IGNORECASE)
        if not match:
            return await message.answer("ü•¥ <b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞</b>, –ø—Ä–∏–º–µ—Ä:\n<code>/8ball –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Ö–æ–º—è–∫ –≤–∑–ª–µ—Ç–∏—Ç?</code>", parse_mode='HTML')
        
        ebr = EightBallReply()
        await message.reply(f"üé± <b>{ebr.get_random_answer()}</b>", parse_mode='HTML')
    except Exception as e:
        logger.error(f"Error in group_8ball: {e}")

@group_router.callback_query(NewUser.step_one)
@group_router.callback_query(F.data.startswith('approve_new_user='))
async def not_robot_user(cb: types.CallbackQuery, state: FSMContext):
    try:
        user_id = cb.from_user.id
        data = await state.get_data()
        message_id = data.get('message_id')

        await bot.restrict_chat_member(cb.message.chat.id, user_id, permissions=types.ChatPermissions(can_send_messages=True))
        await bot.edit_message_text(f"üòé –ü—Ä–∏–≤–µ—Ç, @{cb.from_user.username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–µ–ø–µ—Ä—å, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id=cb.message.chat.id, message_id=message_id)
        await cb.answer()
        await state.clear()
    except Exception as e:
        logger.error(f"Error in not_robot_user: {e}")

@group_router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def group_message_settings(message: types.Message):
    try:
        await group_settings(message)
    except Exception as e:
        logger.error(f"Error in group_message_settings: {e}")

@group_router.message(Command('settings'))
async def group_settings(message: types.Message):
    try:
        await check_user_in_database(message)
        group_settings_kb = create_settings_kb(message.chat.id)
        await message.answer('üõ† –í–Ω–∏–∑—É —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.', reply_markup=group_settings_kb)
    except Exception as e:
        logger.error(f"Error in group_settings: {e}")

@group_router.callback_query(F.data.startswith('welcome_users='))
async def is_welcome_users(cb: types.CallbackQuery):
    try:
        admin = await admin_check(cb.message)
        if not admin:
            return cb.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –≤–∞–º –µ—â–µ —Ä–∞–Ω–æ)")

        server_id = cb.data.replace('welcome_users=', '')
        server_id_pg = str(server_id.replace('-', ''))
        pg = PostgresHandlerServer()
        data = pg.get_server_settings(int(server_id_pg))
        welcome_users = data.welcome_users
        if welcome_users:
            welcome_users = False
        else:
            welcome_users = True

        pg.update_welcome_users(int(server_id_pg), welcome_users)

        await cb.message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'–í–∫–ª—é—á–µ–Ω–æ' if welcome_users else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
        await cb.answer()
    except Exception as e:
        logger.error(f"Error in welcome_users: {e}")

@group_router.callback_query(F.data.startswith('goodbye_users='))
async def is_goodbye_users(cb: types.CallbackQuery):
    try:
        admin = await admin_check(cb.message)
        if not admin:
            return cb.answer("üìõ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –≤–∞–º –µ—â–µ —Ä–∞–Ω–æ)")

        server_id = cb.data.replace('goodbye_users=', '')
        server_id_pg = str(server_id.replace('-', ''))
        pg = PostgresHandlerServer()
        data = pg.get_server_settings(int(server_id_pg))
        goodbye_users = data.goodbye_users
        if goodbye_users:
            goodbye_users = False
        else:
            goodbye_users = True

        pg.update_goodbye_users(int(server_id_pg), goodbye_users)

        await cb.message.answer(f"‚úÖ –ü—Ä–æ—â–∞–π—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {'–í–∫–ª—é—á–µ–Ω–æ' if goodbye_users else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
        await cb.answer()
    except Exception as e:
        logger.error(f"Error in goodbye_users: {e}")

@group_router.message(F.text == '–ü–∞—Ä–∞')
async def group_text_couple(message: types.Message):
    try:
        await group_couple(message)
    except Exception as e:
        logger.error(f"Error in group_text_couple: {e}")

@group_router.message(Command('couple'))
async def group_couple(message: types.Message):
    try:
        await check_user_in_database(message)

        pg = PostgresHandlerServer()
        chat_id = str(message.chat.id).replace('-', '')
        usernames = pg.get_random_user_couple(int(chat_id))
        if len(usernames) == 2:
            await message.answer(f"üë´ @{usernames[0]} –∏ @{usernames[1]} -- –ø–∞—Ä–∞ –¥–Ω—è ‚ù§Ô∏è‚Äçüî•")
        else:
            await message.answer(f"üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–∞—Ä –≤ –≤–∞—à–µ–º —á–∞—Ç–µ.")
    except Exception as e:
        logger.error(f"Error in group_couple: {e}")

@group_router.message(Command('top_karma'))
async def group_top_karma(message: types.Message):
    try:
        pg = PostgresHandlerServer()
        chat_id = str(message.chat.id)

        chat_id = chat_id.replace('-', '')
        usernames = pg.get_top_karma(int(chat_id))
        if usernames is None:
            raise ValueError("Usernames are None")

        if len(usernames) == 0:
            text = "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–º —á–∞—Ç–µ."
        else:
            usernames_str = "\n".join([f"üë§ <b>@{username}</b> : <b>{respect}</b>" for username, respect in usernames])
            text = f"üëë –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–º —á–∞—Ç–µ –ø–æ –∫–∞—Ä–º–µ:\n\n{usernames_str}"

        await message.reply(text, parse_mode='HTML')
    except ValueError as e:
        logger.error(f"Error in top_karma: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error in top_karma: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def fetch_bitcoin_price():
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd'
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False), trust_env=True) as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    return (await response.json())["bitcoin"]["usd"]
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logger.error(f"Network error occurred: {e}")
        return None

@group_router.message(Command('bitcoin'))
async def group_bitcoin(message: types.Message):
    price = await fetch_bitcoin_price()
    
    if price is not None:
        await message.answer(
            f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: <b>{price}$</b> —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ ~ <b>{price * 90} —Ä—É–±–ª–µ–π</b>\n"
            f"üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@group_router.message()
async def bad_words_respects(message: types.Message): #TODO –∏–Ω–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏–∑-–∑–∞ —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ—Ñ–∏–∫—Å–∏—Ç—å
    try:
        is_or_no = sch.predict([message.text])
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞: {is_or_no}")

        if is_or_no == [0]:
            return
        
        if not message.text:
            return
        
        if message.text.startswith('/'):
            return

        pg = PostgresHandlerServer()
        server_id = str(message.chat.id).replace('-', '')
        await message.reply("üò° –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞!\nüë®‚Äçüíª –í–∞—à–∞ –∫–∞—Ä–º–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ -1!")
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        pg.del_respect(int(server_id), message.from_user.id)
    except Exception as e:
        logger.error(f"Error in bad_words_respects: {e}")