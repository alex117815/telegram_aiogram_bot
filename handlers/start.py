from aiogram import Router
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message
from db_handler.db_handler import PostgresHandler
from handlers.admin_handlers import admin_message_start
from handlers.user_handlers import user_message_start
from helpers.get_admins import get_admins
from aiogram.enums import ChatType
from aiogram.utils.deep_linking import decode_payload
from create_bot import bot
import logging
from aiogram.types.input_file import FSInputFile
from keyboards.user_kb import *

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

main_router = Router()

@main_router.message(CommandStart(deep_link=None))
async def cmd_start_ref(message: Message, command: CommandObject):
    try:
        chat_typ = message.chat.type
        if chat_typ != ChatType.PRIVATE:
            return

        db = PostgresHandler()
        user = db.get_user(message.from_user.id)
        admins_id = await get_admins()
        admin = message.from_user.id in admins_id

        if user is None:
            db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name, admin)
            args = command.args
            if args and len(args) > 0:
                payload = decode_payload(args)
                if payload:
                    db.update_referals(payload, message.from_user.id)
                    await message.answer(f"ü•≥ –¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {payload}")
                    await bot.send_message(payload, f"ü•≥ –ü—Ä–æ—à—É –≤–Ω–∏–º–∞–Ω–∏—è, —É –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{message.from_user.username}!")

            await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEMmMhmrfZaUBIXhdd9CtetAAEOp9pL59wAAocVAAI9D1BJ3ptm_dbHo781BA")
            document = FSInputFile('pictures/avatar_group.jpg')
            await message.answer_photo(document, caption="""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —É–º–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç –≤–∞—à–µ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.
üëâ –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä—Å—ã, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.
‚è¨ –ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.
                        """, reply_markup=add_to_server)

        if admin:
            await admin_message_start(message)
        else:
            await user_message_start(message)
    except Exception as e:
        if isinstance(e, TypeError) and 'object of type \'NoneType\' has no len()' in str(e):
            logger.error("Error: incorrect payload")
        else:
            logger.error(f"Error in cmd_start: {e}")
